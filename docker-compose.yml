# docker-compose.yml â€” optimized for runtime config
name: microservicesdeployment

x-env: &app_env
  NODE_ENV: production
  TZ: Asia/Kolkata

services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    ports:
      - "${MYSQL_HOST_PORT:-3310}:3306"   # host:container; override via env if needed
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-usersdb}
      MYSQL_USER: ${MYSQL_USER:-usersvc}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-userpassword}
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-p${MYSQL_ROOT_PASSWORD:-root}"]
      interval: 10s
      timeout: 5s
      retries: 12
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${API_IMAGE:-microservicesdeployment-api:local}
    container_name: api_svc
    restart: unless-stopped
    environment:
      <<: *app_env
      PORT: 4000
      CORS_ORIGIN: http://localhost:3000
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-usersdb}
      DB_USER: ${MYSQL_USER:-usersvc}
      DB_PASS: ${MYSQL_PASSWORD:-userpassword}
    ports:
      - "${API_HOST_PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:4000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 12
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # ðŸ”¹ NOTE: No need to pass REACT_APP_API_URL anymore â€” runtime config.js will handle it
    image: ${WEB_IMAGE:-microservicesdeployment-web:local}
    container_name: web_svc
    restart: unless-stopped
    ports:
      - "${WEB_HOST_PORT:-3000}:80"
    depends_on:
      api:
        condition: service_healthy
    environment:
      <<: *app_env
      # ðŸ”¹ API_URL is injected at runtime by docker-entrypoint.sh + nginx.conf
      API_URL: http://localhost:${API_HOST_PORT:-4000}/api
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Optional DB UI
  adminer:
    image: adminer
    container_name: adminer_ui
    restart: unless-stopped
    ports:
      - "${ADMINER_HOST_PORT:-8081}:8080"
    depends_on:
      db:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  mysql_data:
